# Before Installing , Open CMD (make sure you have pip installed) and type "pip install pygame"
import pygame, sys, random
from pygame.locals import *
from pygame import mixer

class Window:
    def __init__(self, width, height, fps):
        self.width = width
        self.height = height
        self.fps = fps
        self.screen_size = (self.width, self.height)

    def set_window(self):
        global screen, screen_rect
        screen = pygame.display.set_mode(self.screen_size)
        screen_rect = screen.get_rect()

    def win_return(self):
        return [screen, screen_rect]

    def set_clock(self):
        clock = pygame.time.Clock()
        return clock

    def ifQuit(self):
        keys = pygame.key.get_pressed()
        for ev in pygame.event.get():
            if ev.type == QUIT or keys[pygame.K_ESCAPE]:
                print("\nFrom the Maker :- Thanks for using PyEngine")
                pygame.quit()
                sys.exit()


class Background(Window):
    def __init__(self, WIDTH, HEIGHT, FPS):
        Window.__init__(self, WIDTH, HEIGHT, FPS)
        self.WIDTH = WIDTH
        self.HEIGHT = HEIGHT
        self.CLOCK = FPS
        self.screen = Window.set_window(self)

    def solid_color(self, red, green, blue):
        self.red = red
        self.green = green
        self.blue = blue
        screen, screen_rect = Window.win_return(self)
        screen.fill((red, green, blue))

    def Image(self, image):
        screen, screen_rect = Window.win_return(self)
        try:
            self.image = pygame.image.load(image)
        except FileNotFoundError:
            raise Exception("DUMBA**, I CANT FIND YOUR DAMN FILE!!")

        self.image_size = [self.image.get_width(), self.image.get_height()]
        if (self.image_size[0] == self.WIDTH) and (self.image_size[1] == self.HEIGHT):
            self.screen.blit(image, [0, 0])
        elif (self.image_size[0] >= self.WIDTH / 2 and self.image_size[0] <= self.WIDTH) or (
                self.image_size[1] >= self.HEIGHT / 2 and self.image_size[1] <= self.HEIGHT):
            self.new_image = pygame.transform.scale(self.image, self.screen_size)
            screen.blit(self.new_image, [0, 0])
        elif (self.image_size[0] >= WIDTH * 11 / 110 and self.image_size[0] <= WIDTH * 3 / 2) or (
                self.image_size[1] >= HEIGHT * 11 / 110 and self.image_size[1] <= HEIGHT * 3 / 2):
            self.new_image = pygame.transform.scale(self.image, self.screen_size)
            self.screen.blit(self.new_image, [0, 0])
        else:
            print("Invalid Image Size!")
    # except:
    #     raise Exception("Please Enter the File Location!")


class Entity:
    def __init__(self, x, y, vel_x, vel_y, g_pull):
        self.x = x
        self.y = y
        self.vel_x = int(vel_x)
        self.vel_y = int(vel_y)
        self.g_pull = int(g_pull)
        self.jumpAcc = 2.25
        self.temp_vel_y = int(self.vel_y * self.jumpAcc)
        self.screen2, self.screen_rect2 = Window.win_return(self)
        self.screen_size2 = [self.screen2.get_width(), self.screen2.get_height()]
        self.isGrav = False
        self.render = self.Render()
        self.up = False
        self.down = False
        self.left = False
        self.right = False
        self.jump = False

    class solid_entity:
        def __init__(self):
            pass
            
        def create_sprite_rect(ent, par):
            x = par.x
            y = par.y
            # ax = Entity.solid_entity.return_rect_att(ent)
            rect_entity = pygame.Rect(par.x, par.y, ent.width, ent.height)
            return rect_entity

        def create_custom_rect(rect_x, rect_y, rect_w, rect_h):
            rect_entity = pygame.Rect(rect_x, rect_y, rect_w, rect_h)
            return rect_entity

    def get_input(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_d] or keys[pygame.K_RIGHT]:
            self.left, self.right = False, True
        elif keys[pygame.K_a] or keys[pygame.K_LEFT]:
            self.left, self.right = True, False
        else:
            self.left, self.right = False, False
        if keys[pygame.K_s] or keys[pygame.K_DOWN]:
            self.up, self.down = False, True
        elif keys[pygame.K_w] or keys[pygame.K_UP] or keys[pygame.K_SPACE]:
            self.up, self.down = True, False
        else:
            self.up, self.down = False, False
        return self.left, self.right, self.up, self.down
        

    def sprite_load(self, sprite):
        try:
            self.sprite = sprite
        except:
            raise Exception("Please Enter The Sprite File!")

        self.img = pygame.image.load(self.sprite)
        self.img_size = (self.img.get_width(), self.img.get_height())


    def sprite_resize(self, img_width, img_height):
        self.img_width, self.img_height = img_width, img_height
        self.bad_img = self.img
        self.img_size = (img_width, img_height)
        self.md_img = pygame.transform.scale(self.bad_img, self.img_size)
        self.img = self.md_img


    def return_ImgAtt(self):
        return [self.img, self.img.get_rect()]

    def entity_rect(self):
        self.entity_rect = self.img.get_rect()
        self.entity_rect.x, self.entity_rect.y = self.x, self.y
        return self.entity_rect

    def move(self, is_gravity_enabled):
        self.isGrav = is_gravity_enabled
        if self.left == True and (self.entity_rect.left >= 0):
            self.entity_rect.x -= self.vel_x
        elif self.right == True and (self.entity_rect.right <= self.screen_size2[0]):
            self.entity_rect.x += self.vel_x

        if self.up == True and (self.entity_rect.top >= 0) and (self.isGrav == False):
            self.entity_rect.y -= self.vel_y

        elif self.up == True and self.isGrav == True and self.jump == False:
            self.jump = True

        if self.down == True and (self.entity_rect.bottom <= self.screen_size2[1]) and (self.isGrav == False):
            self.entity_rect.y += self.vel_y

    def grav_imp(self):
        if self.jump:
            self.entity_rect.y -= int(self.temp_vel_y * self.jumpAcc)  # 10
            self.temp_vel_y -= self.g_pull  # 5 -= 1
            if self.temp_vel_y < self.vel_y * self.jumpAcc * -1:
                self.jump = False
                self.temp_vel_y = int(self.vel_y * self.jumpAcc)

    def render_temp(self):
        self.screen2.blit(self.img, [self.entity_rect.x, self.entity_rect.y])

    class Render:
        def __init__(self):
            # self.img = ent.return_ImgAtt(self)
            # self.ent_rect = ent.Entity_rect(self)
            self.screen2 = Window.win_return(self)

        def render_sprite(entity):
            entity.screen2.blit(entity.img, [entity.entity_rect.x, entity.entity_rect.y])

        def render_rect(rect, color):
            surf = Window.win_return(rect)[0]
            pygame.draw.rect(surf, color, rect)



"""For now , The code is very simple and Tiny
I'll be adding other features in Future """
